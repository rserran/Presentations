//------------------------------------------------------------------------------
// 02_commonOperator.csl
// Written by Taiob Ali
// SqlWorldWide.com
//------------------------------------------------------------------------------
// Go to: https://aka.ms/LADemo
// Will mostly use LogManagement/AzureMetrics table (loosely speaking)
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Search (https://docs.microsoft.com/en-us/azure/kusto/query/searchoperator)
// by default not case senstive
//------------------------------------------------------------------------------

// Do not run this
// Simple term search over all unrestricted tables and views of the database in scope
search "cpu"

// Will limit all columns of AzureMetrics table
// This search is not case sensitive, you can see uppper case 'CPU' in MetricName column
AzureMetrics
| search "cpu"

// Although you can make it sensitive using a switch 'case_sensitive'
// Look at MetricName Column. Above query was showing record for 'cpu_percent'
// where as below query will exclude those records
AzureMetrics
| search kind=case_sensitive "CPU"

// Restricting search to one column in a table
// "cpu" anywhere in the column
AzureMetrics
| search MetricName : "cpu"   

//exact match
AzureMetrics
| search MetricName == "CPU Credits Remaining" 

// Searches can be combined logically
AzureMetrics
| search "Per Disk Read Bytes/sec" and "CH-JBOXVM10"

//------------------------------------------------------------------------------
// Where (https://docs.microsoft.com/en-us/azure/kusto/query/whereoperator)
//------------------------------------------------------------------------------

// where limits the result set. 
// Rather than looking across columns for values, where limits based on conditions
// Look at the "Time Range" in the portal
// Details about date time and ago operator https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/datetime-operations
AzureMetrics
| where TimeGenerated >= ago(1h)

// Can build up the where by adding to it logically
AzureMetrics
| where TimeGenerated >= ago(1h)
    and MetricName == "CPU Credits Remaining"

// Multiple ands are allowed
AzureMetrics
| where TimeGenerated >= ago(1h)
    and MetricName == "CPU Credits Remaining"
    and Average > 10

// Stackable where operators
AzureMetrics
| where TimeGenerated >= ago(1h)
| where (MetricName == "CPU Credits Remaining"
         or
         MetricName == "Percentage CPU"
         )
| where Average > 10

// You can simulate search using where. Here it searches all columns
// in the input for the phrase CPU somewhere in a column's value
AzureMetrics 
| where * has "CPU"

// Where supports regex as well
AzureMetrics
 | where Resource  matches regex "CH-[A-Z]"

//------------------------------------------------------------------------------
// Take/Limit are synonyms (https://docs.microsoft.com/en-us/azure/kusto/query/takeoperator)
//------------------------------------------------------------------------------

// Take is used to grab a random number of rows from the input data
// There is no guarantee which records are returned, unless the source data is sorted
AzureMetrics 
| take 10 

// Take can be combined with other language operators
AzureMetrics
| where TimeGenerated >= ago(1h)
| where (MetricName == "CPU Credits Remaining"
         or
         MetricName == "Percentage CPU"
         )
| where Average > 10
| take 10

//------------------------------------------------------------------------------
// Count (https://docs.microsoft.com/en-us/azure/kusto/query/countoperator)
//------------------------------------------------------------------------------

// Returns the number of records in the input record set
AzureMetrics  
| count 

// Can also use with other filters
AzureMetrics
| where TimeGenerated >= ago(1h)
| where (MetricName == "CPU Credits Remaining"
         or
         MetricName == "Percentage CPU"
         )
| where Average > 10
| count

//------------------------------------------------------------------------------
// Summarize (https://docs.microsoft.com/en-us/azure/kusto/query/summarizeoperator)
//------------------------------------------------------------------------------

// Summariaze allows you to aggregate by function
// Here we are aggregating by counting number of rows in column name 'MetricName' using the count() function
AzureMetrics 
| summarize count() by MetricName

//Optional name for a result column
AzureMetrics 
| summarize CountByMetricName=count() by MetricName

// Can break down by multiple columns
AzureMetrics 
| summarize count() by Resource, MetricName

// With Summarize, you can use other aggregation functions
AzureMetrics 
| where MetricName has "CPU"
| summarize NumberOfEntries=count()
    , MaxValue=max(Maximum) 
    by Resource, MetricName

// Bin allows you to summarize into logical groups, like days
//by days (copied from pluralsight examples)
Perf 
| summarize NumberOfEntries=count() 
         by bin(TimeGenerated, 1d)

//------------------------------------------------------------------------------
// Extend (https://docs.microsoft.com/en-us/azure/kusto/query/extendoperator)
//------------------------------------------------------------------------------

// Create calculated columns and append them to the result set.
AzureMetrics
| where MetricName == "CPU Credits Remaining"
| where Average != 0
    and Total != Average
| extend HeadRoom = Total - Average 

// Can also use with strcat to create new string columns
AzureMetrics
| extend ResourceMetric = strcat(Resource,  " - ", MetricName) 

//------------------------------------------------------------------------------
// Project (https://docs.microsoft.com/en-us/azure/kusto/query/projectoperator)
// Project can simulate Extend
//------------------------------------------------------------------------------

// Project allows you to select a subset of columns
AzureMetrics
| project TimeGenerated 
        , Resource 
        , ResourceGroup 
        , MetricName 
        , Total 
        , Maximum 
        , Minimum 
        , Average 


// Combine Project with Extend
AzureMetrics
| where MetricName == "CPU Credits Remaining"
| project TimeGenerated 
        , Resource 
        , ResourceGroup 
        , MetricName 
        , Total 
        , Maximum 
        , Minimum 
        , Average 
| extend HeadRoom = Total - Average


// You can use extend prior to project to calculate on a field 
// that you don't want in the final output 
AzureMetrics
| where MetricName == "CPU Credits Remaining"
| extend HeadRoom = Total - Average
| project TimeGenerated 
        , Resource 
        , ResourceGroup 
        , MetricName 
        , Maximum 
        , Minimum 
        , HeadRoom 

// There is a variant called project-away. It will project all except the 
// columns listed
AzureMetrics
| where MetricName == "CPU Credits Remaining"
| project-away ResourceId 
             , ResourceProvider 
             , SubscriptionId 
             , _ResourceId 
             , OperationName 
             
//------------------------------------------------------------------------------
// Distinct (https://docs.microsoft.com/en-us/azure/kusto/query/distinctoperator)
// Distnict is an expensive operation. You can use dcount() aggregation function 
// to get an estimated count of distinct values
// dcoutif() takes a predicate to evaluate
//------------------------------------------------------------------------------

// Produces a table with the distinct combination of the provided columns of the input table
AzureMetrics
| distinct Resource, MetricName

// Distinct can be used to limit a result set 
// Get a list of all MetricName containing CPU
AzureMetrics
| where MetricName has 'CPU'
| distinct Resource, MetricName 

//------------------------------------------------------------------------------
// sample-distinct (https://docs.microsoft.com/en-us/azure/kusto/query/sampledistinctoperator)
//------------------------------------------------------------------------------

//Returns a single column that contains up to the specified number of distinct values of the requested column
AzureMetrics
| sample-distinct 10 of Resource

//------------------------------------------------------------------------------
// Top (https://docs.microsoft.com/en-us/azure/kusto/query/topoperator)
//------------------------------------------------------------------------------

// Returns the first N records sorted by the specified columns
AzureMetrics
| top 20 by TimeGenerated desc  //desc is default

//------------------------------------------------------------------------------
// Sort  (https://docs.microsoft.com/en-us/azure/kusto/query/sortoperator)
// Alias: Order
//------------------------------------------------------------------------------
AzureMetrics
| where MetricName == "CPU Credits Remaining"
| sort by Resource, MetricName

//------------------------------------------------------------------------------
// Extract (https://docs.microsoft.com/en-us/azure/kusto/query/extractfunction)
//------------------------------------------------------------------------------

// Get a match for a regular expression from a text string

// The second param determines what is returned.
// A 0 returns the whole expression.
// A 1 returns just the part in the parenthesis

// Find drives with low disk space
Perf
| where TimeGenerated > ago (7d)
| where ObjectName == "LogicalDisk"
    and CounterName == "% Free Space"
    and CounterValue < 50
    and InstanceName matches regex "[A-Z]:"
| project Computer 
        , CounterName 
        , CounterValue 
        , extract("([A-Z]):", 1, InstanceName)

//------------------------------------------------------------------------------
// Parse (https://docs.microsoft.com/en-us/azure/kusto/query/parseoperator)
//------------------------------------------------------------------------------

// Evaluates a string expression and parses its value into one or more calculated columns
// Copied the code from sample queries under pluralsight
Event
| where RenderedDescription startswith "Event code:" 
| parse RenderedDescription with "Event code: " myEventCode  //I purposely did not put a space after "
                                 " Event message: " myEventMessage 
                                 " Event time: " myEventTime 
                                 " Event time (UTC): " myEventTimeUTC 
                                 " Event ID: " myEventID 
                                 " Event sequence: " myEventSequence
                                 " Event occurrence: " *
| project myEventCode 
        , myEventMessage 
        , myEventTime 
        , myEventTimeUTC 
        , myEventID 
        , myEventSequence 

//If Event table does not have any data use this query
let Traces = datatable(EventText:string)
[
"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=23, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",
"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=15, lockTime=02/17/2016 08:40:00, releaseTime=02/17/2016 08:40:00, previousLockTime=02/17/2016 08:39:00)",
"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=20, lockTime=02/17/2016 08:40:01, releaseTime=02/17/2016 08:40:01, previousLockTime=02/17/2016 08:39:01)",
"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=22, lockTime=02/17/2016 08:41:01, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:01)",
"Event: NotifySliceRelease (resourceName=PipelineScheduler, totalSlices=27, sliceNumber=16, lockTime=02/17/2016 08:41:00, releaseTime=02/17/2016 08:41:00, previousLockTime=02/17/2016 08:40:00)"
];
Traces  
| parse EventText with * "resourceName=" resourceName ", totalSlices=" totalSlices:long * "sliceNumber=" sliceNumber:long * "lockTime=" lockTime ", releaseTime=" releaseTime:date "," * "previousLockTime=" previouLockTime:date ")" *  
| project resourceName ,totalSlices , sliceNumber , lockTime , releaseTime , previouLockTime

//------------------------------------------------------------------------------
// Between (https://docs.microsoft.com/en-us/azure/kusto/query/betweenoperator)
//------------------------------------------------------------------------------

// Matches the input that is inside the inclusive range 
AzureMetrics
| where MetricName == "CPU Credits Remaining"
| where Average between (100 .. 200)

// There's also a "NOT" version
AzureMetrics
| where MetricName == "CPU Credits Remaining"
| where Average !between (100 .. 200)

//------------------------------------------------------------------------------
// todynamic (https://docs.microsoft.com/en-us/azure/kusto/query/todynamicfunction)
//------------------------------------------------------------------------------

//Interprets a JSON value and let you parse individual elements
SecurityAlert
| where TimeGenerated > ago (7d)
| extend ExtProps=todynamic(ExtendedProperties)
| project AlertName 
        , TimeGenerated 
        , ExtProps["resourceType"]
        , ExtProps["ServiceId"]
        , ExtProps["ReportingSystem"]
        , ExtProps["OccuringDatacenter"]


//------------------------------------------------------------------------------
// parse_xml (https://docs.microsoft.com/en-us/azure/kusto/query/parse-xmlfunction)
//------------------------------------------------------------------------------

//copied from https://stackoverflow.com/questions/53873208/turn-series-to-columns-in-kusto-azure-data-explorer
datatable(someColumn:string, xmlValue:string)
["hello", '<EventData xmlns="http://schemas.microsoft.com/win/2004/08/events/event">\r\n'
  '<Data Name="DomainBehaviorVersion">8</Data>\r\n'
  '<Data Name="OemInformation">12</Data>\r\n'
  '<Data Name="DomainPolicyChanged">Password Policy</Data>\r\n'
  '<Data Name="DomainName">XXX</Data>\r\n'
  '<Data Name="DomainSid">S-1-5-21-....</Data>\r\n'
  '<Data Name="SubjectUserSid">S-1-5-18</Data>\r\n'
  '<Data Name="SubjectUserName">SRV-XX-001$</Data>\r\n'
  '<Data Name="SubjectDomainName">DOMAIN</Data>\r\n'
  '<Data Name="SubjectLogonId">0x3e7</Data>\r\n'
  '<Data Name="PrivilegeList">-</Data>\r\n'
  '<Data Name="MinPasswordAge"></Data>\r\n'
  '<Data Name="MaxPasswordAge"></Data>\r\n'
  '<Data Name="ForceLogoff"></Data>\r\n'
  '<Data Name="LockoutThreshold">耠</Data>\r\n'
  '<Data Name="LockoutObservationWindow"></Data>\r\n'
  '<Data Name="LockoutDuration"></Data>\r\n'
  '<Data Name="PasswordProperties">耠-</Data>\r\n'
  '<Data Name="MinPasswordLength">-</Data>\r\n'
  '<Data Name="PasswordHistoryLength">-</Data>\r\n'
  '<Data Name="MachineAccountQuota">-</Data>\r\n'
  '<Data Name="MixedDomainMode">1</Data>\r\n'
'</EventData>',
"world", '<EventData xmlns="http://schemas.microsoft.com/win/2004/08/events/event">\r\n'
  '<Data Name="DomainBehaviorVersion">876543</Data>\r\n'
  '<Data Name="OemInformation">12345</Data>\r\n'
'</EventData>'
]
| extend parsed = parse_xml(xmlValue).EventData.Data
| mvexpand parsed
| summarize d = make_bag(pack(tostring(parsed['@Name']), parsed['#text'])) by someColumn
| evaluate bag_unpack(d)
//------------------------------------------------------------------------------
// format_timespan 
//------------------------------------------------------------------------------

// Formats a timespan parameter based on the format pattern parameter
print format_timespan(time(29.09:00:05.12345), 'dd.hh:mm:ss [FF]')

//------------------------------------------------------------------------------
// format_datetime (https://docs.microsoft.com/en-us/azure/kusto/query/format-datetimefunction)
//------------------------------------------------------------------------------

// Formats a datetime parameter based on the format pattern parameter.
print format_datetime(datetime(2017-01-29 09:00:05), 'yy-MM-dd [HH:mm:ss]'),
      format_datetime(datetime(2017-01-29 09:00:05), 'yyyy-M-dd [H:mm:ss]'), 
      format_datetime(datetime(2017-01-29 09:00:05), 'yy-MM-dd [hh:mm:ss tt]') 

//------------------------------------------------------------------------------
// datetime_part (https://docs.microsoft.com/en-us/azure/kusto/query/datetime-partfunction)
//------------------------------------------------------------------------------

// Extracts the requested date part as an integer value
AzureMetrics
|take 100
|project Resource
       , MetricName
       , year = datetime_part("year", TimeGenerated)
       , quarter = datetime_part("quarter", TimeGenerated)
       , month = datetime_part("month", TimeGenerated)
       , day = datetime_part("day", TimeGenerated)
       , dayOfYear = datetime_part("dayOfYear", TimeGenerated)
       , hour = datetime_part("hour", TimeGenerated)
       , minute = datetime_part("minute", TimeGenerated)
       , second = datetime_part("second", TimeGenerated)

//------------------------------------------------------------------------------
// split (https://docs.microsoft.com/en-us/azure/kusto/query/splitfunction)
//------------------------------------------------------------------------------

// Splits a given string according to a given delimiter and returns a string array with the contained substrings
print
    split("aa_bb", "_"),           
    split("aaa_bbb_ccc", "_", 2)

//------------------------------------------------------------------------------
// render (https://docs.microsoft.com/en-us/azure/kusto/query/renderoperator)
// Instructs the user agent to render the results of the query in a particular way
// The render operator is a client-side feature rather than part of the engine. 
// It's integrated into the language for ease of use. 
// The web application supports the following options: barchart, columnchart, piechart, timechart, and linechart.
//------------------------------------------------------------------------------

// Queries copied from https://github.com/MicrosoftDocs/azure-docs/blob/master/articles/data-explorer/write-queries.md
// You can run these here:https://dataexplorer.azure.com/clusters/help/databases/Samples
// The following query displays a column chart
StormEvents
| summarize event_count=count(), mid = avg(BeginLat) by State
| sort by mid
| where event_count > 1800
| project State, event_count
| render columnchart

//The following query displays a simple time chart.
StormEvents
| summarize event_count=count() by bin(StartTime, 1d)
| render timechart

// The following query counts events by the time modulo one day, binned into hours, and displays a time chart.
StormEvents
| extend hour = floor(StartTime % 1d , 1h)
| summarize event_count=count() by hour
| sort by hour asc
| render timechart

// The following query compares multiple daily series on a time chart
StormEvents
| extend hour= floor( StartTime % 1d , 1h)
| where State in ("GULF OF MEXICO","MAINE","VIRGINIA","WISCONSIN","NORTH DAKOTA","NEW JERSEY","OREGON")
| summarize event_count=count() by hour, State
| render timechart

// Project only the year-month string and the event count
// Copied from pluralsight example in portal
// Putting some of the above example together
Event
| where TimeGenerated between ( ago(365d) .. startofmonth(now()) )
| summarize EventCount = count() by calMonth=startofmonth(TimeGenerated) 
| sort by calMonth desc
| extend MonthNumber = datetime_part("month", calMonth)
       , YearNumber = datetime_part("year", calMonth)
| extend MonthName = case( MonthNumber ==  1, "Jan "
                         , MonthNumber ==  2, "Feb "
                         , MonthNumber ==  3, "Mar "
                         , MonthNumber ==  4, "Apr "
                         , MonthNumber ==  5, "May "
                         , MonthNumber ==  6, "Jun "
                         , MonthNumber ==  7, "Jul "
                         , MonthNumber ==  8, "Aug "
                         , MonthNumber ==  9, "Sep "
                         , MonthNumber == 10, "Oct "
                         , MonthNumber == 11, "Nov "
                         , MonthNumber == 12, "Dec "
                         , "Unknown Month"
                         )
| extend YearMonth = strcat( MonthName, " - ", YearNumber) 
| project YearMonth, EventCount 
| render barchart 