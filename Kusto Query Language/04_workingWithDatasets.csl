//------------------------------------------------------------------------------
// workingWithDatasets.csl
// Written by Taiob Ali
// SqlWorldWide.com
//------------------------------------------------------------------------------
// Go to: https://aka.ms/LADemo
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// let (https://docs.microsoft.com/en-us/azure/kusto/query/letstatement)
//------------------------------------------------------------------------------

// Let statements bind names to expressions
// Expressions bound by let statements can be
// Of scalar type
// Of tabular type
// User-defined func

//events in last one hour for a computer
let n = 10;  // number
let computerName= "On-Premise-16S";  // string
let cutoff = ago(1h); // datetime
Event
| where TimeGenerated > cutoff 
    and Computer  == computerName
| take n

//If no data in Event table use this example 
//Copied from https://docs.microsoft.com/en-us/azure/data-explorer/kusto/query/letstatement#using-multiple-let-statements
let foo1 = (_start:long, _end:long, _step:long) { range x from _start to _end step _step};
let foo2 = (_step:long) { foo1(1, 100, _step)};
foo2(2) | count
// Result: 50

//------------------------------------------------------------------------------
// join (https://docs.microsoft.com/en-us/azure/kusto/query/joinoperator)
//------------------------------------------------------------------------------

// Code copied from https://www.stefanroth.net/2018/05/27/azure-log-analytics-testing-joins/
// innerunique --default
// only first match 
let leftTable = datatable (Id:int, FirstName:string)[
1, "Cora",
2, "Alice",
3, "April",
3, "April",
5, "Libby",
6, "Alexandra",
7, "Shania"];
let rightTable = datatable (Id:int, FirstName:string)[
2, "Alice",
3, "April",
5, "Libby",
6, "Alexandra",
6, "Alexandra",
8, "Tim"];
leftTable
| join kind = innerunique
rightTable on Id

//inner
//Only matching records in both tables are included in the results
let leftTable = datatable (Id:int, FirstName:string)[
1, "Cora",
2, "Alice",
3, "April",
3, "April",
5, "Libby",
6, "Alexandra",
7, "Shania"];
let rightTable = datatable (Id:int, FirstName:string)[
2, "Alice",
3, "April",
5, "Libby",
6, "Alexandra",
6, "Alexandra",
8, "Tim"];
leftTable
| join kind = inner
rightTable on Id

// correlation of CPU and available memory
// copied from pluralsight example in test portal
let startTime = ago(1d);
let endTime = now();
let ProcData = (
    Perf 
    | where TimeGenerated between (startTime .. endTime)
    | where CounterName == "% Processor Time"
    | where ObjectName == "Processor"
    | where InstanceName == "_Total"
    | summarize PctCpuTime = avg(CounterValue) 
            by Computer, bin(TimeGenerated, 1h)
);
let MemData = (
    Perf 
    | where TimeGenerated between (startTime .. endTime)
    | where CounterName == "Available MBytes"
    | summarize AvailableMB = avg(CounterValue) 
            by Computer, bin(TimeGenerated, 1h)
);
ProcData
| join kind= inner (
   MemData 
) on Computer, TimeGenerated
| project TimeGenerated, Computer, PctCpuTime, AvailableMB
| sort by TimeGenerated desc, Computer asc

//------------------------------------------------------------------------------
// prev (https://docs.microsoft.com/en-us/azure/kusto/query/prevfunction)
// next (https://docs.microsoft.com/en-us/azure/kusto/query/nextfunction)
//------------------------------------------------------------------------------
// Returns the value of a column in a row that it at some offset following or prior to the current row
// running average of cpu usage
// copied from pluralsight example in test portal

let startTime = ago(1d);
let endTime = now();
Perf 
| where TimeGenerated between (startTime .. endTime)
| where Computer == "MABS20.NA.contosohotels.com"
| where CounterName == "% Processor Time"
| where ObjectName == "Processor"
| where InstanceName == "_Total"
| summarize PctCpuTime = avg(CounterValue) by bin(TimeGenerated, 1h)
| sort by TimeGenerated asc //serialize is implied in any sort operation
| extend movAvg= (PctCpuTime + prev(PctCpuTime, 1, 0) + prev(PctCpuTime, 2, 0))/3.0

//------------------------------------------------------------------------------
// row_cumsum (https://docs.microsoft.com/en-us/azure/kusto/query/rowcumsumfunction)
//------------------------------------------------------------------------------

// Calculates the cumulative sum of a column in a serialized row set
// notice the 2nd paremeter, can be used to indicate partition of the data
// Following code is copied from https://docs.microsoft.com/en-us/azure/kusto/query/rowcumsumfunction
datatable (name:string, month:int, salary:long)
[
    "Alice", 1, 1000,
    "Bob",   1, 1000,
    "Alice", 2, 2000,
    "Bob",   2, 1950,
    "Alice", 3, 1400,
    "Bob",   3, 1450,
]
| order by name asc, month asc
| extend total=row_cumsum(salary, name != prev(name))

//------------------------------------------------------------------------------
// materialize (https://docs.microsoft.com/en-us/azure/kusto/query/materializefunction)
// Azure Log Analytics does not support this when you use with Batch
// Azure data explorer support this
// See my questin in Stack Overflow:
// https://stackoverflow.com/questions/58151159/azure-data-explorer-query-language-batches-and-materialize/58156011#58156011 
//------------------------------------------------------------------------------

// Allows caching a sub-query result during the time of query execution 
// in a way that other subqueries can reference the partial result

// can only be used in let statement
// Materialize has a cache size limit which is 5 GB
// Run below query in https://dataexplorer.azure.com/clusters/help/databases/Samples

let randomSet = materialize(range x from 1 to 3000000 step 1 | project value = rand(10000000));
randomSet | summarize dcount(value);
randomSet | top 3 by value;
randomSet | summarize sum(value)
